version: "3"

services:
  angular-web:
    build:
      context: web
      dockerfile: Dockerfile
    container_name: angular-web
    image: anyata/angular-web
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - nginxdata:/var/log/nginx
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - flask-api
    networks:
      - frontend
      - backend

  flask-api:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask-api
    image: anyata/flask-api
    restart: unless-stopped
    command: gunicorn -w 2 -b 0.0.0.0:9300 --access-logfile - app:app
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASS}
      MONGO_INITDB_DATABASE: ${MONGODB_INIT_DB}
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
      - mongodbconfig:/data/configdb
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
  mongodbconfig:
  nginxdata:
